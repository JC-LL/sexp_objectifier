module SOBJ
  class CodeGenerator
    def initialize project_name
      @project_name=project_name
      @codes={}
    end

    def generate objects
      puts "=> generating Ruby code".light_green
      build_module(objects)
      dump_files
    end

    def build_module objects
      @codes[:module]=code=Code.new
      code << "# automatically generated by *sobj* tool"
      code << "module #{@project_name.capitalize}"
      code.indent=2
      objects.each do |name,obj|
        code << build_class(obj)
      end
      code.indent=0
      code.newline
      code << "end"
    end

    def build_class klass
      code=Code.new
      code.newline
      code << "class #{klass.name.capitalize} < Ast"
      code.indent=2
      klass.attributes.each do |name,attr|
        code << "attr_accessor :#{name}"
      end
      code.indent=0
      code << "end"
      code
    end

    def dump_files
      @codes.each do |kind,code|
        puts "   ...code for '#{kind}'"
        File.open("#{kind}.rb",'w') do |file|
          file.puts code.finalize
        end
      end
    end
  end
end
